{"version":3,"sources":["components/MineSweeperInputNumber.tsx","components/SelectDifficulty.tsx","components/MineSweeper.tsx","serviceWorker.ts","index.tsx","App.tsx"],"names":["MineSweeperInputNumber","props","value","setValue","min","Infinity","max","step","updateValue","Number","isNaN","useEffect","className","onClick","onChange","e","target","SelectDifficulty","useState","isShowCustomize","setIsShowCustomize","width","setWidth","height","setHeight","mineCount","setMineCount","showGame","panelFlagStyle","panelButton2Style","MineSweeper","reStart","init","selectDifficulty","handleContextMenu","event","preventDefault","state","isEnd","mines","openStatus","markStatus","neighbourMineCount","selectedMineCount","prevProps","prevState","this","play","every","isMine","index","setState","alert","total","Array","fill","i","start","length","randomIndex","Math","floor","random","tmp","shuffle","result","y","x","j","newX","k","newY","calcNeighbourMineCount","slice","floodfill","row","icon","push","key","handleClickLeft","onContextMenu","handleClickRight","renderMines","style","React","PureComponent","Boolean","window","location","hostname","match","ReactDOM","render","isShowGame","setIsShowGame","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4c319cc9.chunk.js","sourcesContent":["import React, {\n    useEffect, \n} from 'react';\nimport './MineSweeperInputNumber.css';\n\ninterface MineSweeperInputNumberProps{\n    value:number;\n    setValue:(val:number)=>void;\n    min?:number;\n    max?:number;\n    step?:number;\n}\n\nexport default function MineSweeperInputNumber(props:MineSweeperInputNumberProps){\n    const {\n        value,\n        setValue,\n        min=-Infinity,\n        max=Infinity,\n        step=1,\n    } = props;\n\n    function updateValue(value:number){\n        if(Number.isNaN(value) || value>max || value<min){\n            return;\n        }\n        setValue(value);\n    }\n\n\n    useEffect(()=>{\n        if(value>max){\n            setValue(max);\n        }\n\n        if(value<min){\n            setValue(min);\n        }\n    },[\n        min,max,value,setValue,\n    ]);\n\n\n    return (\n        <div className=\"input-group\">\n            <div\n                className=\"input-group-addon\"\n                onClick={()=>updateValue(value-step)}\n            >\n            -\n            </div>\n            <input\n                className=\"form-control\"\n                value={props.value}\n                onChange={(e)=>updateValue(Number(e.target.value))}\n            />\n            <div\n                className=\"input-group-addon\"\n                onClick={()=>updateValue(value+step)}\n            >\n            +\n            </div>\n        </div>\n    );\n}","import React, {\n    useState, \n} from 'react';\nimport './SelectDifficulty.css';\nimport MineSweeperInputNumber from './MineSweeperInputNumber';\n\ninterface SelectDifficultyProps{\n    showGame:(width:number,height:number,mineCount:number)=>void;\n}\n\nexport default function SelectDifficulty(props:SelectDifficultyProps){\n    const [\n        isShowCustomize,setIsShowCustomize,\n    ] = useState(false);\n    const [\n        width,setWidth,\n    ] = useState(30);\n    const [\n        height,setHeight,\n    ] = useState(16);\n    const [\n        mineCount,setMineCount,\n    ] = useState(99);\n\n    return (\n        <div className=\"app-section select-difficulty\">\n            <div className={`select-difficulty-container ${isShowCustomize?'show-customize':''}`}>\n                <div className=\"select-difficulty-section\">\n                    <div className=\"select-difficulty-row\">\n                        <div\n                            className=\"select-difficulty-item\"\n                            onClick={()=>props.showGame(8,8,10)}\n                        >\n                            <div>8 x 8</div>\n                            <div>10 个雷</div>\n                        </div>\n                        <div\n                            className=\"select-difficulty-item\"\n                            onClick={()=>props.showGame(16,16,40)}\n                        >\n                            <div>16 x 16</div>\n                            <div>40 个雷</div>\n                        </div>\n                    </div>\n                    <div className=\"select-difficulty-row\">\n                        <div\n                            className=\"select-difficulty-item\"\n                            onClick={()=>props.showGame(30,16,99)}\n                        >\n                            <div>30 x 16</div>\n                            <div>99 个雷</div>\n                        </div>\n                        <div\n                            className=\"select-difficulty-item\"\n                            onClick={()=>setIsShowCustomize(true)}\n                        >\n                            <div>?</div>\n                            <div>自定义</div>\n                        </div>\n                    </div>\n                </div>\n                <div className=\"select-difficulty-section\">\n                    <div>\n                        <div className=\"form-group\">\n                            <label className=\"form-label\">\n                                宽度\n                            </label>\n                            <MineSweeperInputNumber\n                                value={width}\n                                setValue={setWidth}\n                                max={50}\n                                min={1}\n                            />\n                        </div>\n\n                        <div className=\"form-group\">\n                            <label className=\"form-label\">\n                                高度\n                            </label>\n                            <MineSweeperInputNumber\n                                value={height}\n                                setValue={setHeight}\n                                max={50}\n                                min={1}\n                            />\n                        </div>\n\n                        <div className=\"form-group\">\n                            <label className=\"form-label\">\n                                雷数\n                            </label>\n                            <MineSweeperInputNumber\n                                value={mineCount}\n                                setValue={setMineCount}\n                                max={width*height}\n                                min={1}\n                            />\n                        </div>\n\n                        <div className=\"form-group\">\n                            <button\n                                className=\"mine-sweeper-button\"\n                                onClick={()=>props.showGame(width,height,mineCount)}\n                            >\n                                玩游戏\n                            </button>\n                        </div>\n\n                        <div className=\"form-group\">\n                            <button\n                                className=\"mine-sweeper-button\"\n                                onClick={()=>setIsShowCustomize(false)}\n                            >\n                                取消\n                            </button>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n}\n","import React from 'react';\nimport './MineSweeper.css';\n\ninterface MineSweeperProps{\n    selectDifficulty:()=>void;\n    play:boolean;\n    width:number;\n    height:number;\n    mineCount:number;\n}\n\ninterface MineSweeperState{\n    isEnd:boolean;\n    mines:Array<number>;\n    openStatus:Array<number>;\n    markStatus:Array<number>;\n    neighbourMineCount:Array<number>;\n    selectedMineCount:number;\n}\n\nfunction shuffle<T>(mines:Array<T>,start:number):void {\n    for (let i = 1; i < mines.length; i++) {\n        const randomIndex = Math.floor(Math.random() * (i + 1));\n        const tmp = mines[randomIndex];\n        mines[randomIndex] = mines[i];\n        mines[i] = tmp;\n    }\n}\n\nfunction floodfill(\n    x:number,\n    y:number,\n    openStatus:Array<number>,\n    width:number,\n    height:number,\n    neighbourMineCount:Array<number>\n):void{\n    if (x < 0 || y < 0 || x === height || y === width) {\n        return;\n    }\n    const index = x * width + y;\n    if (openStatus[index] === 1) {\n        return;\n    }\n    openStatus[index] = 1;\n    if (neighbourMineCount[index] > 0) {\n        return;\n    }\n    for (let i = -1; i < 2; i++) {\n        for (let j = -1; j < 2; j++) {\n            floodfill(x + i, y + j,openStatus,width,height,neighbourMineCount);\n        }\n    }\n}\n\nfunction calcNeighbourMineCount(width:number,height:number,mines:Array<number>):Array<number>{\n    const result = new Array(mines.length).fill(0);\n    for (let i = 0; i < result.length; i++) {\n        if (!mines[i]) {\n            continue;\n        }\n        const y = i % width;\n        const x = (i - y) / width;\n        for (let j = -1; j < 2; j++) {\n            const newX = x + j;\n            if (newX < 0 || newX === height) {\n                continue;\n            }\n            for (let k = -1; k < 2; k++) {\n                const newY = y + k;\n                if (newY < 0 || newY ===width) {\n                    continue;\n                }\n                result[newX * width + newY]++;\n            }\n        }\n    }\n    return result;\n}\n\nconst panelFlagStyle = {\n    'fontSize':60,\n};\nconst panelButton2Style = {\n    'marginTop':'15px',\n};\n\nexport default class MineSweeper extends React.PureComponent<MineSweeperProps,MineSweeperState>{\n    constructor(props:MineSweeperProps){\n        super(props);\n        this.state = {\n            isEnd: false,\n            mines: [],\n            openStatus: [],\n            markStatus: [],\n            neighbourMineCount:[],\n            selectedMineCount:0,\n        };\n    }\n\n    componentDidUpdate(prevProps:MineSweeperProps, prevState:MineSweeperState){\n        if(this.props.play && !prevProps.play){\n            this.init(this.props.width,this.props.height,this.props.mineCount);\n        }\n\n\n        if(this.state.selectedMineCount !== prevState.selectedMineCount && this.state.selectedMineCount === this.props.mineCount){\n            const match = this.state.mines.every((isMine, index) => {\n                if ((isMine && this.state.markStatus[index] === 1) || (!isMine && this.state.markStatus[index] !== 1)) {\n                    return true;\n                }\n                return false;\n            });\n            if (match) {\n                this.setState({\n                    isEnd:true,\n                },()=>{\n                    alert('win');\n                });\n\n            }\n        }\n    }\n\n    reStart = ()=>{\n        const {\n            width,\n            height,\n            mineCount,\n        } = this.props;\n\n        this.init(width,height,mineCount);\n    }\n\n    selectDifficulty = ()=>{\n        this.props.selectDifficulty();\n    }\n\n    init(width:number,height:number,mineCount:number):void{\n        const total = width * height;\n        const mines = new Array(total).fill(0);\n        for (let i = 0; i < mineCount; i++) {\n            mines[i] = 1;\n        }\n        shuffle<number>(mines,mineCount);\n        const neighbourMineCount = calcNeighbourMineCount(width,height,mines);\n        this.setState({\n            isEnd:false,\n            mines,\n            openStatus:new Array(total).fill(0),\n            markStatus:new Array(total).fill(0),\n            neighbourMineCount,\n            selectedMineCount:0,\n        });\n    }\n\n    handleClickLeft(x:number,y:number):void{\n        if(this.state.isEnd){\n            return;\n        }\n        const index = x*this.props.width+y;\n        if(this.state.openStatus[index] === 1 || this.state.markStatus[index] === 1){\n            return;\n        }\n        if(this.state.mines[index]){\n            const openStatus = this.state.openStatus.slice(0);\n            openStatus[index] = 1;\n            this.setState({\n                isEnd:true,\n                openStatus,\n            },()=>{\n                alert('mine');\n            });\n\n            return;\n        }\n\n        if(this.state.neighbourMineCount[index]>0){\n            const openStatus = this.state.openStatus.slice(0);\n            openStatus[index] = 1;\n            this.setState({\n                openStatus,\n            });\n            return;\n        }\n\n        const openStatus = this.state.openStatus.slice(0);\n        floodfill(x,y,openStatus,this.props.width,this.props.height,this.state.neighbourMineCount);\n        this.setState({\n            openStatus,\n        });\n    }\n\n    handleClickRight(x:number,y:number):void{\n        if(this.state.isEnd){\n            return;\n        }\n        const index = x*this.props.width+y;\n        if(this.state.openStatus[index] === 1){\n            return;\n        }\n        const markStatus = this.state.markStatus.slice(0);\n        markStatus[index] = (markStatus[index]+1)%3;\n        let selectedMineCount = this.state.selectedMineCount;\n        if(markStatus[index] === 2){\n            selectedMineCount--;\n        }else if(markStatus[index] === 1){\n            selectedMineCount++;\n        }\n        this.setState({\n            markStatus,\n            selectedMineCount,\n        });\n    }\n\n    handleContextMenu = (event:React.MouseEvent)=>{\n        event.preventDefault();\n    }\n\n    renderMines(){\n        const mines = [];\n        for(let i=0;i<this.props.height;i++){\n            const row = [];\n            for(let j=0;j<this.props.width;j++){\n                const index = i*this.props.width+j;\n                let icon = null;\n                if(this.state.markStatus[index] === 1){\n                    icon = (\n                        <span className=\"iconfont\">&#xe778;</span>\n                    );\n                }else if(this.state.markStatus[index] === 2){\n                    icon = (\n                        <span className=\"iconfont\">&#xe720;</span>\n                    );\n                }else if(this.state.openStatus[index] === 1){\n                    if(this.state.mines[index]){\n                        icon = (\n                            <span className=\"iconfont\">&#xe63a;</span>\n                        );\n                    }else if(this.state.neighbourMineCount[index]>0){\n                        icon = (\n                            <span>\n                                {this.state.neighbourMineCount[index]}    \n                            </span>\n                        );\n                    }\n                }\n\n                row.push(\n                    <div \n                        className={`mine-sweeper-item ${this.state.openStatus[index]?'is-open':''}`}\n                        key={j}\n                        onClick={()=>this.handleClickLeft(i,j)}\n                        onContextMenu={(e)=>this.handleClickRight(i,j)}\n                    >\n                        {icon}\n                    </div>\n                );\n            }\n            mines.push(\n                <div className=\"mine-sweeper-row\" key={i}>\n                    {row}\n                </div>\n            );\n        }\n\n\n        return (\n            <div \n                className=\"mine-sweeper-container\"\n                onContextMenu={this.handleContextMenu}\n            >\n                {mines}\n            </div>\n        );\n    }\n\n    render(){\n        return (\n            <div className=\"app-section game-container\" >\n                {this.renderMines()}\n                <div className=\"panel-container\">\n                    <div className=\"panel-data-container\">\n                        <span\n                            className=\"iconfont\"\n                            style={panelFlagStyle}\n                        >&#xe778;</span>\n                        <div>\n                            {this.state.selectedMineCount} / { this.props.mineCount }\n                        </div>\n                    </div>\n                    <div>\n                        <button\n                            className=\"mine-sweeper-button\"\n                            onClick={this.reStart}\n                        >\n                            重开一局\n                        </button>\n\n                        <button\n                            className=\"mine-sweeper-button\"\n                            style= {panelButton2Style}\n                            onClick={this.selectDifficulty}\n                        >\n                            改变难度\n                        </button>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(\n            process.env.PUBLIC_URL,\n            window.location.href\n        );\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch(error => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n        headers: {\n            'Service-Worker': 'script', \n        },\n    })\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (\n                response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\n                'No internet connection found. App is running in offline mode.'\n            );\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready.then(registration => {\n            registration.unregister();\n        });\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'assets/css/common.css';\n\nimport App from \"App\";\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React, {\n    useState, \n} from 'react';\nimport SelectDifficulty from 'components/SelectDifficulty';\nimport MineSweeper from 'components/MineSweeper';\nimport './App.css';\n\nexport default function App(){\n    const [\n        isShowGame,setIsShowGame,\n    ] = useState(false);\n    const [\n        width,setWidth,\n    ] = useState(0);\n    const [\n        height,setHeight,\n    ] = useState(0);\n    const [\n        mineCount,setMineCount,\n    ] = useState(0);\n\n    function showGame(width:number,height:number,mineCount:number):void{\n        setIsShowGame(true);\n        setWidth(width);\n        setHeight(height);\n        setMineCount(mineCount);\n    }\n\n    function selectDifficulty():void{\n        setIsShowGame(false);\n    }\n\n    return (\n        <div className=\"app\">\n            <div className={`app-main ${isShowGame?'show-game':''}`}>\n                <SelectDifficulty \n                    showGame={showGame}\n                />\n                <MineSweeper\n                    selectDifficulty={selectDifficulty}\n                    play={isShowGame}\n                    width={width}\n                    height={height}\n                    mineCount={mineCount}\n                />\n            </div>\n        </div>\n    );\n}"],"sourceRoot":""}